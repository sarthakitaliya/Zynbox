// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String?
  email             String             @unique
  emailVerified     Boolean?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sessions          Session[]
  accounts          Account[]
  mails             Mail[]
  categories        CustomCategory[]
  connectedAccounts ConnectedAccount[]

  @@map("users")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model ConnectedAccount {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  name         String
  image        String
  email        String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("connected_accounts")
}

model Mail {
  id          String               @id @default(uuid())
  gmailId     String               @unique
  threadId    String?
  from        String
  to          String
  subject     String
  snippet     String?
  attachments AttachmentMetaData[]
  userId      String
  user        User                 @relation(fields: [userId], references: [id])
  category    CustomCategory?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("mails")
}

model AttachmentMetaData {
  id          String @id @default(uuid())
  fileName    String
  contentType String
  size        Int
  storageUrl  String
  gmailPartId String?
  mailId      String
  mail        Mail   @relation(fields: [mailId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attachment_meta_data")
}

model CustomCategory {
  id          String   @id @default(uuid())
  name        String
  description String?
  icon        String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  emails      Mail[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("custom_categories")
}